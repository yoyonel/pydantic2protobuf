from dataclasses import dataclass
from pathlib import Path
from typing import Iterator, Optional

from fastapi.routing import APIRoute

from pydantic2protobuf.services.j2_pydantic_to_proto import MessageDefinition, gen_message_definition
from pydantic2protobuf.tools.from_fastapi import extract_model_meta_classes
from pydantic2protobuf.tools.from_pydantic import is_type_iterable

proto_header = f"""// Generated by {Path(__file__).resolve()}.  DO NOT EDIT!
syntax = "proto3";

// https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";"""


@dataclass
class MethodRequest:
    empty_google_type: bool
    is_type_iterable: bool
    type_name: Optional[str]


MethodResponse = MethodRequest


@dataclass
class MethodDefinition:
    route_name: str
    request: MethodRequest
    response: MethodResponse


@dataclass
class ServiceDefinition:
    name: str
    methods_definitions: list[MethodDefinition]


@dataclass
class Messages:
    messages: list[MessageDefinition]


@dataclass
class ProtoFileContent:
    service_definition: ServiceDefinition
    messages: list[MessageDefinition]


def gen_service_method_request(route: APIRoute) -> MethodRequest:
    empty_google_type = False
    _is_type_iterable = False
    type_name = None
    try:
        request_body_params = route.dependant.body_params[0]
        _is_type_iterable = is_type_iterable(request_body_params.outer_type_)
        type_name = request_body_params.type_.__name__
    except IndexError:
        empty_google_type = True
    return MethodRequest(empty_google_type=empty_google_type, is_type_iterable=_is_type_iterable, type_name=type_name)


def gen_service_method_response(route: APIRoute) -> MethodResponse:
    empty_google_type = False
    _is_type_iterable = False
    type_name = None
    try:
        response_field = route.response_field
        _is_type_iterable = is_type_iterable(response_field.outer_type_)
        type_name = response_field.type_.__name__
    except AttributeError:
        empty_google_type = True
    return MethodResponse(empty_google_type=empty_google_type, is_type_iterable=_is_type_iterable, type_name=type_name)


def gen_service_method_definition(route: APIRoute) -> MethodDefinition:
    return MethodDefinition(
        route_name=route.name, request=gen_service_method_request(route), response=gen_service_method_response(route)
    )


def gen_service_definition(service_name, routes) -> ServiceDefinition:
    return ServiceDefinition(
        name=service_name, methods_definitions=[gen_service_method_definition(route) for route in routes]
    )


def gen_messages(routes: Iterator[APIRoute]) -> list[MessageDefinition]:
    return [gen_message_definition(model_meta_class) for model_meta_class in set(extract_model_meta_classes(routes))]


def gen_proto_file_contents(routes: Iterator[APIRoute], service_name: str = "Service") -> ProtoFileContent:
    return ProtoFileContent(
        service_definition=gen_service_definition(service_name, routes),
        messages=gen_messages(routes),
    )
