import pydantic2protobuf
from pydantic2protobuf.services.fastapi_to_proto import (
    EmptyGoogleType,
    MethodDefinition,
    MethodRequest,
    ProtoFileContent,
    ServiceDefinition,
)
from pydantic2protobuf.services.pydantic_to_proto import (
    FieldDefinition,
    ManualProtoMessageDefinition,
    MessageDefinition,
)
from pydantic2protobuf.tools.format import NEW_LINE, TAB

PROTO_HEADER = f"""// Generated by {pydantic2protobuf.__name__}:{pydantic2protobuf.__version__}.  DO NOT EDIT!
syntax = "proto3";

// https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";"""


class ProtoFileContentSerializerWithFString:
    # TODO: add a way to handle 'style' properly
    prefix: str = TAB
    indent_level: int = 0
    prefix_name: str = ""

    @staticmethod
    def method_request_serializer(request: MethodRequest) -> str:
        if isinstance(request, EmptyGoogleType):
            return "google.protobuf.Empty"
        stream_qualifier = f"""{"stream " if request.is_iterable else ""}"""
        return f"{stream_qualifier}{request.name}"

    def method_definition_serializer(self, method_definition: MethodDefinition) -> str:
        return " ".join(
            (
                f"{self.prefix}rpc",
                f"do_{method_definition.route_name}",
                f"({self.method_request_serializer(method_definition.request)})",
                "returns",
                f"({self.method_request_serializer(method_definition.response)});",
            )
        )

    def service_definition_serializer(self, service_definition: ServiceDefinition) -> str:
        return f"""service {service_definition.name} {{
{NEW_LINE.join(map(self.method_definition_serializer, service_definition.methods_definitions))}
}}"""

    @staticmethod
    def field_definition_serializer(field_definition: FieldDefinition) -> str:
        if isinstance(field_definition, ManualProtoMessageDefinition):
            return f"{TAB}{f'{NEW_LINE}{TAB}'.join(field_definition.proto_message.split(NEW_LINE))}"
        # TODO: Maybe deactivate generation if disabled (~ early exit, like manual protobuf message passing above)
        return "".join(
            (
                f"""{TAB}{"// disabled: " if field_definition.disable_rpc else ""}""",
                f"""{"repeated " if field_definition.is_iterable else ""}""",
                f"""{"u" if field_definition.is_unsigned else ""}{field_definition.type_translated} """,
                f"""{field_definition.field_name} = {field_definition.field_number};""",
            )
        )

    def message_definition_serializer(self, message_definition: MessageDefinition) -> str:
        message_definitions_lines = (
            f"message {self.prefix_name}{message_definition.name} {{",
            *map(self.field_definition_serializer, message_definition.fields),
            f"}}{NEW_LINE}",
        )
        return NEW_LINE.join(f"{TAB * self.indent_level}{line}" for line in message_definitions_lines)

    def messages_serializer(self, messages_definitions: list[MessageDefinition]) -> str:
        return NEW_LINE.join(map(self.message_definition_serializer, messages_definitions))

    def __call__(self, proto_file_content: ProtoFileContent) -> str:
        service_definition_serialized = self.service_definition_serializer(proto_file_content.service_definition)
        messages_serialized = self.messages_serializer(proto_file_content.messages)
        return (2 * NEW_LINE).join(
            (
                PROTO_HEADER,
                service_definition_serialized,
                messages_serialized,
            )
        )
