from pathlib import Path
from typing import Any, Iterator

from fastapi.routing import APIRoute

from pydantic2protobuf.services.pydantic_to_proto import gen_message_definition
from pydantic2protobuf.tools.format import new_line, tab
from pydantic2protobuf.tools.from_fastapi import extract_model_meta_classes
from pydantic2protobuf.tools.from_pydantic import is_type_iterable

proto_header = f"""// Generated by {Path(__file__).resolve()}.  DO NOT EDIT!
syntax = "proto3";

// https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";"""


def add_stream_qualifier(outer_type: Any) -> str:
    """"""
    return f"""{"stream " if is_type_iterable(outer_type) else ""}"""


def gen_service_method_request(route: APIRoute) -> str:
    """"""
    try:
        request_body_params = route.dependant.body_params[0]
        return f"{add_stream_qualifier(request_body_params.outer_type_)}{request_body_params.type_.__name__}"
    except IndexError:
        return "google.protobuf.Empty"


def gen_service_method_response(route: APIRoute) -> str:
    """"""
    try:
        response_field = route.response_field
        return f"{add_stream_qualifier(response_field.outer_type_)}{response_field.type_.__name__}"
    except AttributeError:
        return "google.protobuf.Empty"


def gen_service_method_definition(route: APIRoute, prefix: str = tab) -> str:
    """"""
    return f"{prefix}rpc do_{route.name} ({gen_service_method_request(route)}) returns ({gen_service_method_response(route)});"


def gen_service_definition(service_name, routes) -> str:
    """"""
    return f"""service {service_name} {{
{new_line.join(map(gen_service_method_definition, routes))}
}}"""


def gen_messages(routes: Iterator[APIRoute]) -> str:
    """"""
    return new_line.join(
        gen_message_definition(model_meta_class) for model_meta_class in set(extract_model_meta_classes(routes))
    )


def gen_proto_file_contents(routes: Iterator[APIRoute], service_name: str = "Service") -> str:
    """"""
    return (2 * new_line).join(
        (
            proto_header,
            gen_service_definition(service_name, routes),
            gen_messages(routes),
        )
    )
